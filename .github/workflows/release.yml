name: docFiller Release

on:
  create:
    branches: dev

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write 
    name: Build packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Debug Information
        run: |
          echo "Current ref: ${GITHUB_REF}"
          echo "Current branch: ${GITHUB_REF#refs/heads/}"
          echo "Event name: ${GITHUB_EVENT_NAME}"

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Get release information
        run: |
          echo "Getting version information..."
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "Set VERSION to: ${VERSION}"

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Build packages
        run: |
          echo "Starting build process..."
          bun install
          echo "Dependencies installed"
          bun run build
          echo "Build completed"
          ls -la

      - name: Package extension
        run: |
          echo "Packaging extension..."
          bun run package
          echo "Package created"
          ls -la web-ext-artifacts/

      - name: Assemble release notes
        run: |
          echo "Assembling release notes..."
          > release.body.txt
          VERSION_PATTERN="### ${VERSION}"
          echo "Looking for pattern: $VERSION_PATTERN"
          echo "Current CHANGELOG.md content:"
          cat CHANGELOG.md
          START_LINE=$(grep -n "$VERSION_PATTERN" CHANGELOG.md | cut -d: -f1)
          echo "Found version at line: $START_LINE"
          if [ -n "$START_LINE" ]; then
            NEXT_VERSION_LINE=$(($(tail -n +$((START_LINE+1)) CHANGELOG.md | grep -n "^## " | head -n1 | cut -d: -f1) + START_LINE))
            echo "Next version starts at line: $NEXT_VERSION_LINE"
            if [ -n "$NEXT_VERSION_LINE" ]; then
              sed -n "$START_LINE,$((NEXT_VERSION_LINE-1))p" CHANGELOG.md > release.body.txt
            else
              sed -n "$START_LINE,\$p" CHANGELOG.md > release.body.txt
            fi
          fi
          echo "Generated release notes:"
          cat release.body.txt

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: true
          prerelease: true
          body_path: release.body.txt
          files: |
            web-ext-artifacts/docfiller-${{ env.VERSION }}.zip